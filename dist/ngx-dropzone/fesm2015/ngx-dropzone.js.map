{"version":3,"file":"ngx-dropzone.js.map","sources":["ng://ngx-dropzone/lib/ngx-dropzone.service.ts","ng://ngx-dropzone/lib/ngx-dropzone.component.ts","ng://ngx-dropzone/lib/ngx-dropzone.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface ParsedFile extends File {\n  preview: string | ArrayBuffer;\n}\n\nexport interface RejectedFile extends File {\n  error: any\n}\n\nexport interface FileSelectResult {\n  addedFiles: ParsedFile[],\n  rejectedFiles: RejectedFile[]\n}\n\n@Injectable()\nexport class NgxDropzoneService {\n  // Parses a single file for the dropzone\n  parseFile(file: File, accept: string, maxFileSize: number, preserveFiles: boolean,\n            showPreviews: boolean): Promise<ParsedFile> {\n    return new Promise<ParsedFile>(async (resolve, reject) => {\n      if (accept !== '*')\n        if (!accept.endsWith('/*') ? !accept.includes(file.type) :\n          accept.split('/')[0] !== file.type.split('/')[0])\n          return reject(\"File has unaccepted file type\");\n\n      if (maxFileSize && file.size > maxFileSize)\n        return reject(\"File size exceeds maximum file limit\");\n\n      let result: ParsedFile = {\n        lastModified: file.lastModified,\n        name: file.name,\n        preview: null,\n        size: file.size,\n        type: file.type,\n        slice: file.slice\n      };\n\n      if (showPreviews && file.type.startsWith('image'))\n        this.readFile(file).then(preview => {\n          result.preview = preview;\n          resolve(result);\n        }).catch(error => reject(error));\n      else resolve(result);\n    });\n  }\n\n  // Parses a set of files for the dropzone\n  parseFiles(files: File[], accept: string, maxFileSize: number,\n             preserveFiles: boolean, showPreviews: boolean): Promise<FileSelectResult> {\n    return new Promise<FileSelectResult>((resolve, reject) => {\n      let results: FileSelectResult = {\n        addedFiles: [],\n        rejectedFiles: []\n      };\n\n      let promises: Promise<void>[] = files.map(file => {\n        return this.parseFile(file, accept, maxFileSize, preserveFiles, showPreviews)\n          .then(parsed => {\n            results.addedFiles.push(parsed);\n          }).catch(error => {\n            results.rejectedFiles.push({\n              error: error,\n              lastModified: file.lastModified,\n              name: file.name,\n              size: file.size,\n              slice: file.slice,\n              type: file.type\n            });\n          })\n      });\n\n      Promise.all(promises).then(() => {\n        resolve(results);\n      });\n    });\n  }\n\n  // Read a file to generate a preview\n  private readFile(file: File): Promise<string | ArrayBuffer> {\n    return new Promise<string | ArrayBuffer>((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        return resolve((e.target as FileReader).result);\n      };\n\n      reader.onerror = e => {\n        return reject(`FileReader failed on file ${file.name}. No preview image created.`);\n      }\n\n      reader.readAsDataURL(file);\n    })\n  }\n}\n","import {\n  Component,\n  Input, Output, ElementRef, ViewChild,\n  EventEmitter, TemplateRef,\n  HostListener,\n  HostBinding,\n  ContentChild,\n  OnInit\n} from '@angular/core';\nimport { NgxDropzoneService, FileSelectResult, ParsedFile, RejectedFile } from './ngx-dropzone.service';\nimport { reject } from 'q';\n\n@Component({\n  selector: 'ngx-dropzone',\n  template: `<input type=\"file\"\n       #fileInput class=\"file-input\"\n       (change)=\"onFilesSelected($event)\"\n       [multiple]=\"multiple\"\n       [accept]=\"accept\" />\n\n<div class=\"dropzone\"\n     #dropzone>\n  <div class=\"droparea\" (click)=\"showFileSelector()\">\n    <ng-container *ngTemplateOutlet=\"dropareaTemplate ? dropareaTemplate : dropareaFallbackTemplate\">\n    </ng-container>\n  </div>\n  <div *ngIf=\"showPreviews\" class=\"previews\">\n    <ng-container *ngFor=\"let file of files\">\n      <ng-container *ngTemplateOutlet=\"\n                    previewTemplate ? previewTemplate : previewFallbackTemplate;\n                    context: {\n                      $implicit: {\n                        file: file,\n                        remove: removeFile.bind(this)\n                      }\n                    }\">\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #dropareaFallbackTemplate>\n  Click or drop your files here\n</ng-template>\n\n<ng-template #previewFallbackTemplate let-context>\n  <div class=\"preview-fallback\" [class.no-image]=\"!context.file.preview\">\n    <div class=\"overlay\">\n      <div class=\"content\">\n        <div class=\"filename\">{{context.file.name}}</div>\n        <button (click)=\"context.remove(context.file)\">Remove</button>\n      </div>\n    </div>\n    <img *ngIf=\"context.file.preview\" [src]=\"context.file.preview\" />\n  </div>\n</ng-template>\n`,\n  styles: [`:host(){display:flex;flex-direction:column;height:180px;background:#fff;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px}:host().hovered{border:2px solid #717386;color:#dfdfe4}:host().disabled{opacity:.5;cursor:no-drop}:host():not(.disabled)>.dropzone>.droparea{cursor:pointer}:host()>.dropzone{position:relative;width:100%;min-height:100%;overflow:hidden;display:flex;flex-direction:column}:host()>.dropzone>.droparea{display:flex;align-items:center;justify-content:center;width:100%;flex:1;z-index:4}:host()>.dropzone>.previews{height:50%;width:100%;display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;justify-content:space-around;overflow-y:auto;overflow-x:hidden}:host()>.dropzone>.previews>.no-image>.filename{padding:10px}:host()>.dropzone>.previews>.preview-fallback{position:relative;text-align:center;max-height:calc(100% - 10px);height:200px;max-width:200px;width:25%;min-width:100px;margin:10px;z-index:0}:host()>.dropzone>.previews>.preview-fallback>img{max-height:100%;max-width:100%;border-radius:5px;opacity:.8;z-index:1}:host()>.dropzone>.previews>.preview-fallback>.overlay{position:absolute;display:flex;align-items:center;justify-content:center;background-color:rgba(0,0,0,.8);width:100%;height:100%;z-index:2}:host()>.dropzone>.previews>.preview-fallback>.overlay>.content{padding:2.5%;max-width:95%;max-height:95%}:host()>.dropzone>.previews>.preview-fallback>.overlay>.content>.filename{text-overflow:ellipsis;overflow:hidden}:host()>.dropzone>.previews.limit-width{max-width:25%}.file-input{display:none}`],\n  providers: [NgxDropzoneService] // Create a new service instance for each component.\n})\nexport class NgxDropzoneComponent implements OnInit {\n  constructor(\n    public service: NgxDropzoneService\n  ) { }\n\n  @ContentChild('droparea') dropareaTemplate: TemplateRef<ElementRef>;\n  @ContentChild('preview') previewTemplate: TemplateRef<ElementRef>;\n\n  @Input() multiple = true;\n  @Input() accept = '*';\n  @Input() maxFileSize: number;\n  @Input() showPreviews = false;\n  @Input() preserveFiles = true;\n\n  files: ParsedFile[] = [];\n  @Input('files') filesInput: File[] = [];\n\n  @Output() filesAdded: EventEmitter<File[]> = new EventEmitter<File[]>();\n  @Output() filesRemoved: EventEmitter<File[]> = new EventEmitter<File[]>();\n  @Output() filesRejected: EventEmitter<RejectedFile[]> = new EventEmitter<RejectedFile[]>();\n  @Output('filesChange') filesChanged: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n  @HostBinding('class.disabled') @Input() disabled = false;\n  @HostBinding('class.hovered') hovering = false;\n\n  @ViewChild('fileInput') private fileInput: ElementRef;\n\n  showFileSelector() {\n    if (!this.disabled)\n      this.fileInput.nativeElement.click();\n  }\n\n  ngOnInit(): void {\n    this.handleFilesSelection(this.filesInput);\n  }\n\n  onFilesSelected(event) {\n    const files: FileList = event.target.files;\n\n    this.handleFileListSelection(files).then(() => {\n      // Reset the file input value to trigger the event on new selection.\n      (this.fileInput.nativeElement as HTMLInputElement).value = '';\n    });\n  }\n\n  /**\n   * UPDATE 10.03.2019:\n   * Refactored to use HostListener and HostBindings to allow\n   * for easier style overwriting from outside the component.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event) {\n    if (this.disabled) return;\n\n    this.preventDefault(event);\n    this.hovering = true;\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event) {\n    if (!event.currentTarget.contains(event.relatedTarget))\n      this.hovering = false;\n  }\n\n  @HostListener('drop', ['$event'])\n  onDrop(event) {\n    this.preventDefault(event);\n    this.hovering = false;\n    this.handleFileListSelection(event.dataTransfer.files);\n  }\n\n  removeFile(file: ParsedFile) {\n    var precount = this.files.length;\n    this.files = this.files.filter(x => x != file);\n    if (precount == this.files.length) return;\n    this.filesChanged.emit(this.files);\n    this.filesRemoved.emit([file]);\n  }\n\n  private handleFilesSelection(files: File[]): Promise<void> {\n    return new Promise<void>(resolve => {\n      if (this.disabled) return reject(\"Dropzone is disabled\");\n\n      if (!this.multiple && files.length > 1)\n        return reject(\"Cannot accept multiple files\");\n\n      this.service.parseFiles(files, this.accept, this.maxFileSize,\n        this.preserveFiles, this.showPreviews)\n        .then((result: FileSelectResult) => {\n          if (result.addedFiles.length) {\n            if (!this.multiple || !this.preserveFiles) this.files = result.addedFiles;\n            else this.files = this.files.concat(result.addedFiles);\n            this.filesChanged.emit(this.files);\n            this.filesAdded.emit(result.addedFiles);\n          }\n\n          if (result.rejectedFiles.length)\n            this.filesRejected.emit(result.rejectedFiles);\n\n          resolve();\n        });\n    });\n  }\n\n  private handleFileListSelection(files: FileList): Promise<void> {\n    return this.handleFilesSelection(Array.from(files));\n  }\n\n  private preventDefault(event: DragEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxDropzoneComponent } from './ngx-dropzone.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxDropzoneComponent\n  ],\n  exports: [\n    NgxDropzoneComponent\n  ]\n})\nexport class NgxDropzoneModule { }\n"],"names":["reject"],"mappings":";;;;;;;;;MAgBa,kBAAkB;;;;;;;;;;IAE7B,SAAS,CAAC,IAAU,EAAE,MAAc,EAAE,WAAmB,EAAE,aAAsB,EACvE,YAAqB;QAC7B,OAAO,IAAI,OAAO;;;;;QAAa,CAAO,OAAO,EAAEA,SAAM;YACnD,IAAI,MAAM,KAAK,GAAG;gBAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;oBACtD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAChD,OAAOA,SAAM,CAAC,+BAA+B,CAAC,CAAC;YAEnD,IAAI,WAAW,IAAI,IAAI,CAAC,IAAI,GAAG,WAAW;gBACxC,OAAOA,SAAM,CAAC,sCAAsC,CAAC,CAAC;;gBAEpD,MAAM,GAAe;gBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB;YAED,IAAI,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;gBAC/C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI;;;;gBAAC,OAAO;oBAC9B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBACzB,OAAO,CAAC,MAAM,CAAC,CAAC;iBACjB,EAAC,CAAC,KAAK;;;;gBAAC,KAAK,IAAIA,SAAM,CAAC,KAAK,CAAC,EAAC,CAAC;;gBAC9B,OAAO,CAAC,MAAM,CAAC,CAAC;SACtB,CAAA,EAAC,CAAC;KACJ;;;;;;;;;;IAGD,UAAU,CAAC,KAAa,EAAE,MAAc,EAAE,WAAmB,EAClD,aAAsB,EAAE,YAAqB;QACtD,OAAO,IAAI,OAAO;;;;;QAAmB,CAAC,OAAO,EAAEA,SAAM;;gBAC/C,OAAO,GAAqB;gBAC9B,UAAU,EAAE,EAAE;gBACd,aAAa,EAAE,EAAE;aAClB;;gBAEG,QAAQ,GAAoB,KAAK,CAAC,GAAG;;;;YAAC,IAAI;gBAC5C,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,YAAY,CAAC;qBAC1E,IAAI;;;;gBAAC,MAAM;oBACV,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACjC,EAAC,CAAC,KAAK;;;;gBAAC,KAAK;oBACZ,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC;wBACzB,KAAK,EAAE,KAAK;wBACZ,YAAY,EAAE,IAAI,CAAC,YAAY;wBAC/B,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;qBAChB,CAAC,CAAC;iBACJ,EAAC,CAAA;aACL,EAAC;YAEF,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI;;;YAAC;gBACzB,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;;;;;;;IAGO,QAAQ,CAAC,IAAU;QACzB,OAAO,IAAI,OAAO;;;;;QAAuB,CAAC,OAAO,EAAEA,SAAM;;kBACjD,MAAM,GAAG,IAAI,UAAU,EAAE;YAE/B,MAAM,CAAC,MAAM;;;;YAAG,CAAC;gBACf,OAAO,OAAO,CAAC,oBAAC,CAAC,CAAC,MAAM,IAAgB,MAAM,CAAC,CAAC;aACjD,CAAA,CAAC;YAEF,MAAM,CAAC,OAAO;;;;YAAG,CAAC;gBAChB,OAAOA,SAAM,CAAC,6BAA6B,IAAI,CAAC,IAAI,6BAA6B,CAAC,CAAC;aACpF,CAAA,CAAA;YAED,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC5B,EAAC,CAAA;KACH;;;YA9EF,UAAU;;;;;;;ACfX,MA4Da,oBAAoB;;;;IAC/B,YACS,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;QAM3B,aAAQ,GAAG,IAAI,CAAC;QAChB,WAAM,GAAG,GAAG,CAAC;QAEb,iBAAY,GAAG,KAAK,CAAC;QACrB,kBAAa,GAAG,IAAI,CAAC;QAE9B,UAAK,GAAiB,EAAE,CAAC;QACT,eAAU,GAAW,EAAE,CAAC;QAE9B,eAAU,GAAyB,IAAI,YAAY,EAAU,CAAC;QAC9D,iBAAY,GAAyB,IAAI,YAAY,EAAU,CAAC;QAChE,kBAAa,GAAiC,IAAI,YAAY,EAAkB,CAAC;QACpE,iBAAY,GAAyB,IAAI,YAAY,EAAU,CAAC;QAE/C,aAAQ,GAAG,KAAK,CAAC;QAC3B,aAAQ,GAAG,KAAK,CAAC;KApB1C;;;;IAwBL,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,QAAQ;YAChB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACxC;;;;IAED,QAAQ;QACN,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC5C;;;;;IAED,eAAe,CAAC,KAAK;;cACb,KAAK,GAAa,KAAK,CAAC,MAAM,CAAC,KAAK;QAE1C,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,IAAI;;;QAAC;;YAEvC,oBAAC,IAAI,CAAC,SAAS,CAAC,aAAa,IAAsB,KAAK,GAAG,EAAE,CAAC;SAC/D,EAAC,CAAC;KACJ;;;;;;;;IAQD,UAAU,CAAC,KAAK;QACd,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACtB;;;;;IAGD,WAAW,CAAC,KAAK;QACf,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC;YACpD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACzB;;;;;IAGD,MAAM,CAAC,KAAK;QACV,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACxD;;;;;IAED,UAAU,CAAC,IAAgB;;YACrB,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;;QAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAC,CAAC;QAC/C,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;YAAE,OAAO;QAC1C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;KAChC;;;;;;IAEO,oBAAoB,CAAC,KAAa;QACxC,OAAO,IAAI,OAAO;;;;QAAO,OAAO;YAC9B,IAAI,IAAI,CAAC,QAAQ;gBAAE,OAAO,MAAM,CAAC,sBAAsB,CAAC,CAAC;YAEzD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;gBACpC,OAAO,MAAM,CAAC,8BAA8B,CAAC,CAAC;YAEhD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,EAC1D,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC;iBACrC,IAAI;;;;YAAC,CAAC,MAAwB;gBAC7B,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE;oBAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa;wBAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC;;wBACrE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBACzC;gBAED,IAAI,MAAM,CAAC,aAAa,CAAC,MAAM;oBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBAEhD,OAAO,EAAE,CAAC;aACX,EAAC,CAAC;SACN,EAAC,CAAC;KACJ;;;;;;IAEO,uBAAuB,CAAC,KAAe;QAC7C,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACrD;;;;;;IAEO,cAAc,CAAC,KAAgB;QACrC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;KACzB;;;YA/JF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CX;gBACC,MAAM,EAAE,CAAC,+hDAA+hD,CAAC;gBACziD,SAAS,EAAE,CAAC,kBAAkB,CAAC;aAChC;;;;YAlDQ,kBAAkB;;;+BAwDxB,YAAY,SAAC,UAAU;8BACvB,YAAY,SAAC,SAAS;uBAEtB,KAAK;qBACL,KAAK;0BACL,KAAK;2BACL,KAAK;4BACL,KAAK;yBAGL,KAAK,SAAC,OAAO;yBAEb,MAAM;2BACN,MAAM;4BACN,MAAM;2BACN,MAAM,SAAC,aAAa;uBAEpB,WAAW,SAAC,gBAAgB,cAAG,KAAK;uBACpC,WAAW,SAAC,eAAe;wBAE3B,SAAS,SAAC,WAAW;yBAyBrB,YAAY,SAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;0BAQnC,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;qBAMpC,YAAY,SAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;;;;;;;AC5HlC,MAea,iBAAiB;;;YAX7B,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,YAAY,EAAE;oBACZ,oBAAoB;iBACrB;gBACD,OAAO,EAAE;oBACP,oBAAoB;iBACrB;aACF;;;;;;;;;;;;;;;"}
